opts.train.numEpochs = 25
opts.train.batchSize = 100

% 1 conv1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.03*randn(4,4,3,48, 'single'), zeros(1, 48, 'single')}}, ...
                           'learningRate',[1,2],...
                           'dilate', 1, ...
                           'stride', 1, ...
                           'pad', 1,...
                           'opts',{{}}) ;
                       
% 2 relu2
net.layers{end+1} = struct('type', 'relu','leak',0) ;


% 3 conv1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.01*randn(4,4,48,48, 'single'), zeros(1, 48, 'single')}}, ...
                           'learningRate',[1,2],...
                           'dilate', 1, ...
                           'stride', 1, ...
                           'pad', 0,...
                           'opts',{{}}) ;
                       
% 4 relu2
net.layers{end+1} = struct('type', 'relu','leak',0) ;

% 5 pool1 (max pool)
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0,...
                           'opts',{{}}) ;

% 6 conv1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.03*randn(5,5,48,48, 'single'), zeros(1, 48, 'single')}}, ...
                           'learningRate',[1,2],...
                           'dilate', 1, ...
                           'stride', 1, ...
                           'pad', 0,...
                           'opts',{{}}) ;
                       
% 7 relu2
net.layers{end+1} = struct('type', 'relu','leak',0) ;


% 8 conv1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{1e-2*randn(6,6,48,64, 'single'), zeros(1, 64, 'single')}}, ...
                           'learningRate',[1,2],...
                           'dilate', 1, ...
                           'stride', 1, ...
                           'pad', 0,...
                           'opts',{{}}) ;
                       
% 9 relu2
net.layers{end+1} = struct('type', 'relu','leak',0) ;

% 10 Dropout
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4);

% 11 pool1 (max pool)
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0,...
                           'opts',{{}}) ;

% 12 conv2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.02*randn(2,2,64,100, 'single'), zeros(1, 100, 'single')}}, ...
                           'learningRate',[1,2],...
                           'dilate', 1, ...
                           'stride', 1, ...
                           'pad', 0,...
                           'opts',{{}}) ;
              
% 13 relu2
net.layers{end+1} = struct('type', 'relu','leak',0);
                      
% 14 loss
net.layers{end+1} = struct('type', 'softmaxloss');

